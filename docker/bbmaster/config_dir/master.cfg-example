# -*- python -*-
# ex: set filetype=python:

import os
from buildbot.plugins import *
from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers import timed
from buildbot.reporters.http import HttpStatusPush

# 0.8.x stuff
#from buildbot.plugins import changes
#from buildbot.status.status_push import HttpStatusPush
#from buildbot.plugins import buildslave, schedulers, status, steps, util
#from buildbot.status import html
#from buildbot.status.web import authz, auth

from zcash_factories import (
    PairingPerformanceFactory,
    SaplingTestFactory,
    ZcashASanFactory,
    ZcashCheckDependsFactory,
    ZcashCoverageFactory,
    ZcashExpectedFailuresFactory,
    ZcashInitialBlockDownloadTimeFactory,
    ZcashMergeTestFactory,
    ZcashPerformanceFactory,
    ZcashProtonMergeTestFactory,
    ZcashTSanFactory,
    ZcashValgrindFactory,
)

from zcash_helpers import (
    load_webcreds,
    read_or_generate_secret,
    read_required_path,
)

WEB_CREDS={"homer": "doh!"}

authz = util.Authz(
  allowRules=[
    util.AnyControlEndpointMatcher(role='admins'),
  ],
  roleMatchers=[
    util.RolesFromUsername(
        roles=['admins'],
        usernames=[cred[0] for cred in WEB_CREDS])
  ]
)
auth = util.UserPasswordAuth(WEB_CREDS)

def trigger(supportedSchedulerNames, unsupportedSchedulerNames, **kw):
    haltOnFailure = kw.pop('haltOnFailure', False)
    waitForFinish = kw.pop('waitForFinish', True)
    return steps.Trigger(
        schedulerNames=supportedSchedulerNames+unsupportedSchedulerNames,
        unimportantSchedulerNames=unsupportedSchedulerNames,
        haltOnFailure=haltOnFailure,
        waitForFinish=waitForFinish,
        set_properties=kw,
    )

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS
c['workers'] = []

c['workers'].append(worker.KubeLatentWorker(
    'kube-buildbot-worker',
    image='buildbot/buildbot-worker',
    namespace='default',
    kube_config=util.KubeInClusterConfigLoader()
))

c['workers'].append(worker.KubeLatentWorker(
    'debian9-worker',
    image='gcr.io/uplifted-plate-210520/bbworker-debian9:latest',
    namespace='default',
    build_wait_timeout=60*60,
    keepalive_interval=5,
    kube_config=util.KubeInClusterConfigLoader()
))


# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://github.com/benzcash/zcash.git',
        project="zcash-project",
        workdir='gitpoller-zcash',
        branches= True,
        pollinterval=60))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="debian9-schedule",
                            change_filter=util.ChangeFilter(project="zcash-project", branch='test-builds'),
                            treeStableTimer=5,
                            builderNames=["debian9-build"]))


c['schedulers'].append(schedulers.Periodic(
                            name="Every 30 minutes",
                            builderNames=["debian9-build"],
                            periodicBuildTimer=60*30,))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []

b_example = []

f = util.BuildFactory()
f.addStep(steps.Git(repourl='http://github.com/zcash/zcash.git', mode='incremental'))
f.addStep(steps.ShellCommand(
                command=['./zcutil/build.sh', util.Interpolate('-j%(prop:numcpus)s')],
                name='build.sh',
            ))

b_example.append({
    'name': 'debian9-build',
    'workernames': 'debian9-worker',
    'factory': f,
    'tags': [
        'supported',
    ],
})


c['builders'] += b_example


####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "k8s-dev-ci.z.cash"
c['titleURL'] = "https://k8s-dev-ci.z.cash"
c['buildbotNetUsageData'] = 'basic'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get('BUILDBOT_MASTER_URL', 'http://localhost:8010/')

# minimalistic config to activate new web UI
c['www'] = {
    'port': 8010,
    'plugins': {
        'waterfall_view': True,
        'console_view': True,
    },
    'auth': auth,
    'authz': authz,
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "postgresql+psycopg2://buildbot:{PG_PASSWORD}@pg-buildbot/buildbot".format(
        **os.environ
    ),
}

